// Code generated by goa v3.7.2, DO NOT EDIT.
//
// rules client
//
// Command:
// $ goa gen checkpoint/design

package rules

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "rules" service client.
type Client struct {
	EgressListEndpoint  goa.Endpoint
	IngressListEndpoint goa.Endpoint
}

// NewClient initializes a "rules" service client given the endpoints.
func NewClient(egressList, ingressList goa.Endpoint) *Client {
	return &Client{
		EgressListEndpoint:  egressList,
		IngressListEndpoint: ingressList,
	}
}

// EgressList calls the "egressList" endpoint of the "rules" service.
func (c *Client) EgressList(ctx context.Context) (res *StoredCheckpointRuleSet, err error) {
	var ires interface{}
	ires, err = c.EgressListEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*StoredCheckpointRuleSet), nil
}

// IngressList calls the "ingressList" endpoint of the "rules" service.
func (c *Client) IngressList(ctx context.Context) (res *StoredCheckpointRuleSet, err error) {
	var ires interface{}
	ires, err = c.IngressListEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*StoredCheckpointRuleSet), nil
}
