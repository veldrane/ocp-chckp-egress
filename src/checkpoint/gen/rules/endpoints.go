// Code generated by goa v3.7.2, DO NOT EDIT.
//
// rules endpoints
//
// Command:
// $ goa gen checkpoint/design

package rules

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "rules" service endpoints.
type Endpoints struct {
	EgressList  goa.Endpoint
	IngressList goa.Endpoint
}

// NewEndpoints wraps the methods of the "rules" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		EgressList:  NewEgressListEndpoint(s),
		IngressList: NewIngressListEndpoint(s),
	}
}

// Use applies the given middleware to all the "rules" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.EgressList = m(e.EgressList)
	e.IngressList = m(e.IngressList)
}

// NewEgressListEndpoint returns an endpoint function that calls the method
// "egressList" of service "rules".
func NewEgressListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.EgressList(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredCheckpointRuleSet(res, "default")
		return vres, nil
	}
}

// NewIngressListEndpoint returns an endpoint function that calls the method
// "ingressList" of service "rules".
func NewIngressListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.IngressList(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStoredCheckpointRuleSet(res, "default")
		return vres, nil
	}
}
