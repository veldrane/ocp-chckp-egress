// Code generated by goa v3.7.2, DO NOT EDIT.
//
// rules HTTP client encoders and decoders
//
// Command:
// $ goa gen checkpoint/design

package client

import (
	"bytes"
	rules "checkpoint/gen/rules"
	rulesviews "checkpoint/gen/rules/views"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildEgressListRequest instantiates a HTTP request object with method and
// path set to call the "rules" service "egressList" endpoint
func (c *Client) BuildEgressListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EgressListRulesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("rules", "egressList", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeEgressListResponse returns a decoder for responses returned by the
// rules egressList endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeEgressListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EgressListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("rules", "egressList", err)
			}
			p := NewEgressListStoredCheckpointRuleSetOK(&body)
			view := "default"
			vres := &rulesviews.StoredCheckpointRuleSet{Projected: p, View: view}
			if err = rulesviews.ValidateStoredCheckpointRuleSet(vres); err != nil {
				return nil, goahttp.ErrValidationError("rules", "egressList", err)
			}
			res := rules.NewStoredCheckpointRuleSet(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("rules", "egressList", resp.StatusCode, string(body))
		}
	}
}

// BuildIngressListRequest instantiates a HTTP request object with method and
// path set to call the "rules" service "ingressList" endpoint
func (c *Client) BuildIngressListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IngressListRulesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("rules", "ingressList", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeIngressListResponse returns a decoder for responses returned by the
// rules ingressList endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeIngressListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IngressListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("rules", "ingressList", err)
			}
			p := NewIngressListStoredCheckpointRuleSetOK(&body)
			view := "default"
			vres := &rulesviews.StoredCheckpointRuleSet{Projected: p, View: view}
			if err = rulesviews.ValidateStoredCheckpointRuleSet(vres); err != nil {
				return nil, goahttp.ErrValidationError("rules", "ingressList", err)
			}
			res := rules.NewStoredCheckpointRuleSet(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("rules", "ingressList", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStoredCheckpointRuleResponseBodyToRulesviewsStoredCheckpointRuleView
// builds a value of type *rulesviews.StoredCheckpointRuleView from a value of
// type *StoredCheckpointRuleResponseBody.
func unmarshalStoredCheckpointRuleResponseBodyToRulesviewsStoredCheckpointRuleView(v *StoredCheckpointRuleResponseBody) *rulesviews.StoredCheckpointRuleView {
	if v == nil {
		return nil
	}
	res := &rulesviews.StoredCheckpointRuleView{
		Name:        v.Name,
		ID:          v.ID,
		Description: v.Description,
	}
	if v.Ranges != nil {
		res.Ranges = make([]string, len(v.Ranges))
		for i, val := range v.Ranges {
			res.Ranges[i] = val
		}
	}

	return res
}
