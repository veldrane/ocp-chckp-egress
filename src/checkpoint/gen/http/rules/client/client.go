// Code generated by goa v3.7.2, DO NOT EDIT.
//
// rules client HTTP transport
//
// Command:
// $ goa gen checkpoint/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the rules service endpoint HTTP clients.
type Client struct {
	// EgressList Doer is the HTTP client used to make requests to the egressList
	// endpoint.
	EgressListDoer goahttp.Doer

	// IngressList Doer is the HTTP client used to make requests to the ingressList
	// endpoint.
	IngressListDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the rules service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		EgressListDoer:      doer,
		IngressListDoer:     doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// EgressList returns an endpoint that makes HTTP requests to the rules service
// egressList server.
func (c *Client) EgressList() goa.Endpoint {
	var (
		decodeResponse = DecodeEgressListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEgressListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EgressListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rules", "egressList", err)
		}
		return decodeResponse(resp)
	}
}

// IngressList returns an endpoint that makes HTTP requests to the rules
// service ingressList server.
func (c *Client) IngressList() goa.Endpoint {
	var (
		decodeResponse = DecodeIngressListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildIngressListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IngressListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("rules", "ingressList", err)
		}
		return decodeResponse(resp)
	}
}
