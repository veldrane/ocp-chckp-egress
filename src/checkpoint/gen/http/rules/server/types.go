// Code generated by goa v3.7.2, DO NOT EDIT.
//
// rules HTTP server types
//
// Command:
// $ goa gen checkpoint/design

package server

import (
	rulesviews "checkpoint/gen/rules/views"
)

// EgressListResponseBody is the type of the "rules" service "egressList"
// endpoint HTTP response body.
type EgressListResponseBody struct {
	// version of the ruleset
	Version string `form:"version" json:"version" xml:"version"`
	// description of the object
	Description string `form:"description" json:"description" xml:"description"`
	// Rulesets
	Objects []*StoredCheckpointRuleResponseBody `form:"objects,omitempty" json:"objects,omitempty" xml:"objects,omitempty"`
}

// IngressListResponseBody is the type of the "rules" service "ingressList"
// endpoint HTTP response body.
type IngressListResponseBody struct {
	// version of the ruleset
	Version string `form:"version" json:"version" xml:"version"`
	// description of the object
	Description string `form:"description" json:"description" xml:"description"`
	// Rulesets
	Objects []*StoredCheckpointRuleResponseBody `form:"objects,omitempty" json:"objects,omitempty" xml:"objects,omitempty"`
}

// StoredCheckpointRuleResponseBody is used to define fields on response body
// types.
type StoredCheckpointRuleResponseBody struct {
	// Return the name of the record
	Name string `form:"name" json:"name" xml:"name"`
	// uuid of the object
	ID string `form:"id" json:"id" xml:"id"`
	// description of the object
	Description string `form:"description" json:"description" xml:"description"`
	// Ip adresss
	Ranges []string `form:"ranges,omitempty" json:"ranges,omitempty" xml:"ranges,omitempty"`
}

// NewEgressListResponseBody builds the HTTP response body from the result of
// the "egressList" endpoint of the "rules" service.
func NewEgressListResponseBody(res *rulesviews.StoredCheckpointRuleSetView) *EgressListResponseBody {
	body := &EgressListResponseBody{}
	if res.Version != nil {
		body.Version = *res.Version
	}
	if res.Description != nil {
		body.Description = *res.Description
	}
	if res.Version == nil {
		body.Version = "1.0"
	}
	if res.Description == nil {
		body.Description = ""
	}
	if res.Objects != nil {
		body.Objects = make([]*StoredCheckpointRuleResponseBody, len(res.Objects))
		for i, val := range res.Objects {
			body.Objects[i] = marshalRulesviewsStoredCheckpointRuleViewToStoredCheckpointRuleResponseBody(val)
		}
	}
	return body
}

// NewIngressListResponseBody builds the HTTP response body from the result of
// the "ingressList" endpoint of the "rules" service.
func NewIngressListResponseBody(res *rulesviews.StoredCheckpointRuleSetView) *IngressListResponseBody {
	body := &IngressListResponseBody{}
	if res.Version != nil {
		body.Version = *res.Version
	}
	if res.Description != nil {
		body.Description = *res.Description
	}
	if res.Version == nil {
		body.Version = "1.0"
	}
	if res.Description == nil {
		body.Description = ""
	}
	if res.Objects != nil {
		body.Objects = make([]*StoredCheckpointRuleResponseBody, len(res.Objects))
		for i, val := range res.Objects {
			body.Objects[i] = marshalRulesviewsStoredCheckpointRuleViewToStoredCheckpointRuleResponseBody(val)
		}
	}
	return body
}
