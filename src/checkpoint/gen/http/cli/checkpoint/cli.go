// Code generated by goa v3.7.2, DO NOT EDIT.
//
// checkpoint HTTP client CLI support package
//
// Command:
// $ goa gen checkpoint/design

package cli

import (
	rootc "checkpoint/gen/http/root/client"
	rulesc "checkpoint/gen/http/rules/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `root default
rules (egress-list|ingress-list)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` root default` + "\n" +
		os.Args[0] + ` rules egress-list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		rootFlags = flag.NewFlagSet("root", flag.ContinueOnError)

		rootDefaultFlags = flag.NewFlagSet("default", flag.ExitOnError)

		rulesFlags = flag.NewFlagSet("rules", flag.ContinueOnError)

		rulesEgressListFlags = flag.NewFlagSet("egress-list", flag.ExitOnError)

		rulesIngressListFlags = flag.NewFlagSet("ingress-list", flag.ExitOnError)
	)
	rootFlags.Usage = rootUsage
	rootDefaultFlags.Usage = rootDefaultUsage

	rulesFlags.Usage = rulesUsage
	rulesEgressListFlags.Usage = rulesEgressListUsage
	rulesIngressListFlags.Usage = rulesIngressListUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "root":
			svcf = rootFlags
		case "rules":
			svcf = rulesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "root":
			switch epn {
			case "default":
				epf = rootDefaultFlags

			}

		case "rules":
			switch epn {
			case "egress-list":
				epf = rulesEgressListFlags

			case "ingress-list":
				epf = rulesIngressListFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "root":
			c := rootc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "default":
				endpoint = c.Default()
				data = nil
			}
		case "rules":
			c := rulesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "egress-list":
				endpoint = c.EgressList()
				data = nil
			case "ingress-list":
				endpoint = c.IngressList()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// rootUsage displays the usage of the root command and its subcommands.
func rootUsage() {
	fmt.Fprintf(os.Stderr, `Service provide redirect to swagger-ui
Usage:
    %[1]s [globalflags] root COMMAND [flags]

COMMAND:
    default: Return default redirect

Additional help:
    %[1]s root COMMAND --help
`, os.Args[0])
}
func rootDefaultUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] root default

Return default redirect

Example:
    %[1]s root default
`, os.Args[0])
}

// rulesUsage displays the usage of the rules command and its subcommands.
func rulesUsage() {
	fmt.Fprintf(os.Stderr, `Service provides management for stored chekcpoint rules
Usage:
    %[1]s [globalflags] rules COMMAND [flags]

COMMAND:
    egress-list: List all egress rules
    ingress-list: List all ingress rules

Additional help:
    %[1]s rules COMMAND --help
`, os.Args[0])
}
func rulesEgressListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rules egress-list

List all egress rules

Example:
    %[1]s rules egress-list
`, os.Args[0])
}

func rulesIngressListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] rules ingress-list

List all ingress rules

Example:
    %[1]s rules ingress-list
`, os.Args[0])
}
